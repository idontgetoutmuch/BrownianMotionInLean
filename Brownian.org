haar :: forall n k .
        (KnownNat n, KnownNat k, (2 * k - 1 <=? 2^n - 1) ~ 'True) =>
        Haar n (2 * k - 1)
haar = Haar g where
  g t | (k' - 1) * 2 ** (-n') < t && t <= k'       * 2 ** (-n') =  2 ** ((n' - 1) / 2)
      | k'       * 2 ** (-n') < t && t <= (k' + 1) * 2 ** (-n') = -2 ** ((n' - 1) / 2)
      | otherwise                                               =  0
    where
        n' = fromIntegral (natVal (Proxy :: Proxy n))
        k' = 2 * (fromIntegral (natVal (Proxy :: Proxy k))) - 1
